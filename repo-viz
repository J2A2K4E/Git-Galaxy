<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>GitGalaxy - Repository Visualization</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #000;
    }

    #galaxy-container {
      position: relative;
      width: 100vw;
      height: 100vh;
    }

    .ui-panel {
      position: absolute;
      background: rgba(0, 0, 20, 0.9);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      padding: 20px;
      color: white;
      z-index: 100;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }

    .controls-panel {
      top: 20px;
      left: 20px;
      max-width: 320px;
    }

    .info-panel {
      top: 20px;
      right: 20px;
      max-width: 350px;
      display: none;
    }

    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 200;
    }

    .language-legend {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px;
      margin-top: 12px;
      max-height: 200px;
      overflow-y: auto;
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 12px;
    }

    .legend-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      flex-shrink: 0;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px;
      font-size: 12px;
      margin-bottom: 12px;
    }

    .stat-item {
      background: rgba(255, 255, 255, 0.05);
      padding: 8px;
      border-radius: 6px;
      text-align: center;
    }

    @media (max-width: 768px) {
      .controls-panel {
        max-width: calc(100vw - 40px);
        top: 10px;
        left: 10px;
        right: 10px;
      }

      .info-panel {
        max-width: calc(100vw - 40px);
        top: auto;
        bottom: 10px;
        left: 10px;
        right: 10px;
      }

      .ui-panel {
        padding: 16px;
      }
    }

    input,
    select {
      font-size: 16px !important;
      /* Prevent zoom on iOS */
    }
  </style>
</head>

<body>
  <div id="galaxy-container">
    <div class="loading-overlay" id="loading" style="display: none;">
      <div class="text-center">
        <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-400 mx-auto mb-4"></div>
        <div class="text-white text-xl font-semibold">Creating Galaxy...</div>
        <div class="text-blue-300 text-sm mt-2" id="loading-status">Initializing...</div>
      </div>
    </div>

    <div class="ui-panel controls-panel">
      <div class="flex items-center gap-3 mb-4">
        <div class="text-2xl">üåå</div>
        <h2 class="text-xl font-bold text-blue-300">GitGalaxy</h2>
      </div>

      <div class="mb-4">
        <label class="block text-sm font-medium mb-2 text-gray-300">GitHub Username/Organization:</label>
        <div class="flex gap-2">
          <input type="text" id="username-input" placeholder="e.g., microsoft, google" class="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white text-base focus:border-blue-500 focus:outline-none">
          <button id="load-btn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition-colors">
            üöÄ
          </button>
        </div>
      </div>

      <div class="grid grid-cols-1 gap-3 mb-4">
        <div>
          <label class="block text-sm font-medium mb-1 text-gray-300">Filter by Language:</label>
          <select id="language-filter" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white text-base focus:border-blue-500 focus:outline-none">
            <option value="">All Languages</option>
          </select>
        </div>

        <div>
          <label class="block text-sm font-medium mb-1 text-gray-300">Sort by:</label>
          <select id="sort-option" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white text-base focus:border-blue-500 focus:outline-none">
            <option value="stars">‚≠ê Stars (High to Low)</option>
            <option value="updated">üìÖ Recently Updated</option>
            <option value="forks">üç¥ Forks (High to Low)</option>
            <option value="name">üìù Name (A-Z)</option>
          </select>
        </div>
      </div>

      <div id="galaxy-stats" class="stats-grid" style="display: none;">
        <div class="stat-item">
          <div class="text-blue-300 font-semibold" id="total-repos">0</div>
          <div class="text-xs text-gray-400">Repositories</div>
        </div>
        <div class="stat-item">
          <div class="text-yellow-300 font-semibold" id="total-stars">0</div>
          <div class="text-xs text-gray-400">Total Stars</div>
        </div>
        <div class="stat-item">
          <div class="text-green-300 font-semibold" id="total-languages">0</div>
          <div class="text-xs text-gray-400">Languages</div>
        </div>
        <div class="stat-item">
          <div class="text-purple-300 font-semibold" id="visible-repos">0</div>
          <div class="text-xs text-gray-400">Visible</div>
        </div>
      </div>

      <div class="text-xs text-gray-400 border-t border-gray-700 pt-3">
        <p><strong>üéÆ Controls:</strong></p>
        <p>‚Ä¢ Drag: Rotate view</p>
        <p>‚Ä¢ Scroll/Pinch: Zoom</p>
        <p>‚Ä¢ Click star: Repository details</p>
      </div>

      <div class="language-legend" id="language-legend"></div>
    </div>

    <div class="ui-panel info-panel" id="info-panel">
      <div class="flex justify-between items-start mb-3">
        <h3 class="text-lg font-bold text-green-300">Repository Details</h3>
        <button id="close-info" class="text-gray-400 hover:text-white text-xl">√ó</button>
      </div>
      <div id="repo-info"></div>
    </div>
  </div>

  <script>
    class GitGalaxy {
      constructor() {
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({
          antialias: true,
          alpha: true
        });
        this.controls = null;
        this.raycaster = new THREE.Raycaster();
        this.mouse = new THREE.Vector2();
        this.stars = [];
        this.repositories = [];
        this.languageColors = {};
        this.currentFilter = '';
        this.currentSort = 'stars';
        this.backgroundStars = null;
        this.init();
        this.setupEventListeners();
        this.createBackground();
      }
      init() {
        // Renderer setup
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setClearColor(0x000011, 1);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        document.getElementById('galaxy-container').appendChild(this.renderer.domElement);
        // Camera setup
        this.camera.position.set(0, 5, 25);
        // Controls setup (OrbitControls from CDN)
        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.minDistance = 5;
        this.controls.maxDistance = 100;
        this.controls.enablePan = true;
        this.controls.enableZoom = true;
        // Start render loop
        this.animate();
      }
      createBackground() {
        // Create starfield background
        const backgroundGeometry = new THREE.BufferGeometry();
        const backgroundVertices = [];
        for (let i = 0; i < 3000; i++) {
          const x = (Math.random() - 0.5) * 300;
          const y = (Math.random() - 0.5) * 300;
          const z = (Math.random() - 0.5) * 300;
          backgroundVertices.push(x, y, z);
        }
        backgroundGeometry.setAttribute('position', new THREE.Float32BufferAttribute(backgroundVertices, 3));
        const backgroundMaterial = new THREE.PointsMaterial({
          color: 0x888888,
          size: 1,
          transparent: true,
          opacity: 0.4
        });
        this.backgroundStars = new THREE.Points(backgroundGeometry, backgroundMaterial);
        this.scene.add(this.backgroundStars);
        // Add nebula effect
        this.createNebula();
      }
      createNebula() {
        const nebulaGeometry = new THREE.BufferGeometry();
        const nebulaVertices = [];
        const colors = [];
        for (let i = 0; i < 500; i++) {
          const x = (Math.random() - 0.5) * 150;
          const y = (Math.random() - 0.5) * 150;
          const z = (Math.random() - 0.5) * 150;
          nebulaVertices.push(x, y, z);
          // Purple/blue nebula colors
          const color = new THREE.Color();
          color.setHSL(0.7 + Math.random() * 0.2, 0.5, 0.3);
          colors.push(color.r, color.g, color.b);
        }
        nebulaGeometry.setAttribute('position', new THREE.Float32BufferAttribute(nebulaVertices, 3));
        nebulaGeometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
        const nebulaMaterial = new THREE.PointsMaterial({
          size: 8,
          transparent: true,
          opacity: 0.1,
          vertexColors: true,
          blending: THREE.AdditiveBlending
        });
        const nebula = new THREE.Points(nebulaGeometry, nebulaMaterial);
        this.scene.add(nebula);
      }
      getLanguageColor(language) {
        if (!language) return 0x666666;
        if (!this.languageColors[language]) {
          const languageColorMap = {
            'JavaScript': 0xF7DF1E,
            'TypeScript': 0x3178C6,
            'Python': 0x3776AB,
            'Java': 0xED8B00,
            'C++': 0x00599C,
            'C': 0xA8B9CC,
            'C#': 0x239120,
            'PHP': 0x777BB4,
            'Ruby': 0xCC342D,
            'Go': 0x00ADD8,
            'Rust': 0x000000,
            'Swift': 0xFA7343,
            'Kotlin': 0x7F52FF,
            'Dart': 0x0175C2,
            'HTML': 0xE34F26,
            'CSS': 0x1572B6,
            'Shell': 0x89E051,
            'Dockerfile': 0x384D54,
            'YAML': 0xCB171E,
            'JSON': 0x000000
          };
          if (languageColorMap[language]) {
            this.languageColors[language] = languageColorMap[language];
          } else {
            const colors = [
              0xFF6B6B, 0x4ECDC4, 0x45B7D1, 0x96CEB4, 0xFECE54,
              0xFF8A65, 0xBA68C8, 0x81C784, 0x64B5F6, 0xFFB74D,
              0xF06292, 0x9575CD, 0x4DB6AC, 0xAED581, 0xFFD54F
            ];
            this.languageColors[language] = colors[Object.keys(this.languageColors).length % colors.length];
          }
        }
        return this.languageColors[language];
      }
      getBrightness(lastUpdated) {
        const now = new Date();
        const diffTime = Math.abs(now - new Date(lastUpdated));
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        // More recent = brighter (logarithmic scale)
        const brightness = Math.max(0.2, 1 - Math.log(diffDays + 1) / Math.log(365));
        return brightness;
      }
      async fetchRepositories(username) {
        try {
          document.getElementById('loading-status').textContent = 'Fetching repositories...';
          const response = await fetch(`https://api.github.com/users/${username}/repos?per_page=100&sort=updated`);
          if (!response.ok) {
            if (response.status === 404) {
              throw new Error('User not found. Please check the username.');
            } else if (response.status === 403) {
              throw new Error('GitHub API rate limit exceeded. Please try again later.');
            } else {
              throw new Error(`GitHub API error: ${response.status}`);
            }
          }
          const repos = await response.json();
          if (!Array.isArray(repos)) {
            throw new Error('Invalid response from GitHub API');
          }
          return repos.filter(repo => !repo.fork && !repo.archived); // Filter out forks and archived repos
        } catch (error) {
          console.error('Error fetching repositories:', error);
          throw error;
        }
      }
      createStar(repo, index, total) {
        const starCount = repo.stargazers_count || 0;
        const language = repo.language;
        const lastUpdated = repo.pushed_at;
        // Size based on stars (logarithmic scale with minimum size)
        const size = Math.max(0.1, Math.min(2, Math.log(starCount + 1) * 0.2));
        // Create geometry and material
        const geometry = new THREE.SphereGeometry(size, 12, 12);
        const color = this.getLanguageColor(language);
        const brightness = this.getBrightness(lastUpdated);
        const material = new THREE.MeshBasicMaterial({
          color: color,
          emissive: color,
          emissiveIntensity: brightness * 0.5,
          transparent: true,
          opacity: 0.8
        });
        const star = new THREE.Mesh(geometry, material);
        // Position in a spiral galaxy pattern
        const angle = (index / total) * Math.PI * 6; // More spiral turns
        const radius = 3 + (index / total) * 20;
        const height = (Math.random() - 0.5) * 6;
        star.position.set(
          Math.cos(angle) * radius + (Math.random() - 0.5) * 3,
          height,
          Math.sin(angle) * radius + (Math.random() - 0.5) * 3
        );
        // Store repository data
        star.userData = repo;
        star.originalPosition = star.position.clone();
        // Add glow effect for highly starred repos
        if (starCount > 100) {
          const glowGeometry = new THREE.SphereGeometry(size * 1.5, 8, 8);
          const glowMaterial = new THREE.MeshBasicMaterial({
            color: color,
            transparent: true,
            opacity: 0.2,
            blending: THREE.AdditiveBlending
          });
          const glow = new THREE.Mesh(glowGeometry, glowMaterial);
          star.add(glow);
        }
        return star;
      }
      async createGalaxy(username) {
        try {
          document.getElementById('loading').style.display = 'flex';
          document.getElementById('loading-status').textContent = 'Fetching repositories...';
          // Clear existing stars
          this.clearStars();
          // Fetch repositories
          this.repositories = await this.fetchRepositories(username);
          if (this.repositories.length === 0) {
            throw new Error('No public repositories found for this user');
          }
          document.getElementById('loading-status').textContent = `Creating ${this.repositories.length} stars...`;
          // Sort repositories by stars for better initial layout
          this.repositories.sort((a, b) => (b.stargazers_count || 0) - (a.stargazers_count || 0));
          // Create stars with animation
          for (let i = 0; i < this.repositories.length; i++) {
            const repo = this.repositories[i];
            const star = this.createStar(repo, i, this.repositories.length);
            // Start from center and animate to position
            const targetPos = star.position.clone();
            star.position.set(0, 0, 0);
            star.scale.set(0, 0, 0);
            this.stars.push(star);
            this.scene.add(star);
            // Animate star into position
            setTimeout(() => {
              this.animateStarToPosition(star, targetPos);
            }, i * 50);
          }
          // Update UI
          this.updateLanguageFilter();
          this.updateLanguageLegend();
          this.updateStats();
          document.getElementById('galaxy-stats').style.display = 'grid';
          document.getElementById('loading').style.display = 'none';
        } catch (error) {
          document.getElementById('loading').style.display = 'none';
          this.showError(`Error: ${error.message}`);
        }
      }
      animateStarToPosition(star, targetPos) {
        const startPos = star.position.clone();
        const startScale = star.scale.clone();
        const targetScale = new THREE.Vector3(1, 1, 1);
        let progress = 0;
        const animate = () => {
          progress += 0.05;
          if (progress <= 1) {
            star.position.lerpVectors(startPos, targetPos, progress);
            star.scale.lerpVectors(startScale, targetScale, progress);
            requestAnimationFrame(animate);
          }
        };
        animate();
      }
      showError(message) {
        // Create a simple error notification
        const errorDiv = document.createElement('div');
        errorDiv.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-red-600 text-white px-4 py-2 rounded-lg z-50';
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        setTimeout(() => {
          errorDiv.remove();
        }, 5000);
      }
      clearStars() {
        this.stars.forEach(star => {
          this.scene.remove(star);
          star.geometry.dispose();
          star.material.dispose();
        });
        this.stars = [];
        this.languageColors = {};
      }
      updateLanguageFilter() {
        const languages = [...new Set(this.repositories.map(repo => repo.language).filter(Boolean))];
        languages.sort();
        const select = document.getElementById('language-filter');
        const currentValue = select.value;
        select.innerHTML = '<option value="">All Languages</option>';
        languages.forEach(lang => {
          const option = document.createElement('option');
          option.value = lang;
          option.textContent = lang;
          if (lang === currentValue) option.selected = true;
          select.appendChild(option);
        });
      }
      updateLanguageLegend() {
        const languages = [...new Set(this.repositories.map(repo => repo.language).filter(Boolean))];
        const legend = document.getElementById('language-legend');
        legend.innerHTML = '';
        if (languages.length === 0) return;
        languages.slice(0, 12).forEach(lang => {
          const item = document.createElement('div');
          item.className = 'legend-item';
          const color = this.getLanguageColor(lang);
          item.innerHTML = `
                        <div class="legend-color" style="background-color: #${color.toString(16).padStart(6, '0')}"></div>
                        <span>${lang}</span>
                    `;
          legend.appendChild(item);
        });
      }
      updateStats() {
        const totalStars = this.repositories.reduce((sum, repo) => sum + (repo.stargazers_count || 0), 0);
        const languages = new Set(this.repositories.map(repo => repo.language).filter(Boolean));
        const visibleRepos = this.stars.filter(star => star.visible).length;
        document.getElementById('total-repos').textContent = this.repositories.length;
        document.getElementById('total-stars').textContent = this.formatNumber(totalStars);
        document.getElementById('total-languages').textContent = languages.size;
        document.getElementById('visible-repos').textContent = visibleRepos;
      }
      formatNumber(num) {
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
        return num.toString();
      }
      filterAndSort() {
        let filteredRepos = this.repositories;
        // Apply language filter
        if (this.currentFilter) {
          filteredRepos = filteredRepos.filter(repo => repo.language === this.currentFilter);
        }
        // Apply sorting
        switch (this.currentSort) {
          case 'stars':
            filteredRepos.sort((a, b) => (b.stargazers_count || 0) - (a.stargazers_count || 0));
            break;
          case 'updated':
            filteredRepos.sort((a, b) => new Date(b.pushed_at) - new Date(a.pushed_at));
            break;
          case 'forks':
            filteredRepos.sort((a, b) => (b.forks_count || 0) - (a.forks_count || 0));
            break;
          case 'name':
            filteredRepos.sort((a, b) => a.name.localeCompare(b.name));
            break;
        }
        // Update star visibility
        this.stars.forEach(star => {
          const isVisible = filteredRepos.includes(star.userData);
          star.visible = isVisible;
          star.material.opacity = isVisible ? 0.8 : 0.1;
        });
        // Reposition visible stars in spiral
        const visibleStars = this.stars.filter(star => star.visible);
        visibleStars.forEach((star, index) => {
          const total = visibleStars.length;
          const angle = (index / total) * Math.PI * 6;
          const radius = 3 + (index / total) * 20;
          const height = (Math.random() - 0.5) * 6;
          const targetPos = new THREE.Vector3(
            Math.cos(angle) * radius + (Math.random() - 0.5) * 3,
            height,
            Math.sin(angle) * radius + (Math.random() - 0.5) * 3
          );
          this.animateStarToPosition(star, targetPos);
        });
        this.updateStats();
      }
      showRepositoryInfo(repo) {
        const panel = document.getElementById('info-panel');
        const info = document.getElementById('repo-info');
        const lastUpdated = new Date(repo.pushed_at).toLocaleDateString();
        const language = repo.language || 'Not specified';
        const stars = this.formatNumber(repo.stargazers_count || 0);
        const forks = this.formatNumber(repo.forks_count || 0);
        const size = repo.size ? `${(repo.size / 1024).toFixed(1)} MB` : 'Unknown';
        info.innerHTML = `
                    <div class="mb-3">
                        <h4 class="text-lg font-bold text-blue-300 break-words">${repo.name}</h4>
                        <p class="text-sm text-gray-400">by ${repo.owner.login}</p>
                    </div>
                    
                    <div class="mb-3">
                        <p class="text-gray-300 text-sm leading-relaxed">${repo.description || 'No description available'}</p>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-2 text-xs mb-4">
                        <div class="bg-gray-800 p-2 rounded">
                            <div class="text-yellow-300 font-semibold">‚≠ê ${stars}</div>
                            <div class="text-gray-400">Stars</div>
                        </div>
                        <div class="bg-gray-800 p-2 rounded">
                            <div class="text-green-300 font-semibold">üç¥ ${forks}</div>
                            <div class="text-gray-400">Forks</div>
                        </div>
                        <div class="bg-gray-800 p-2 rounded">
                            <div class="text-blue-300 font-semibold">üíª ${language}</div>
                            <div class="text-gray-400">Language</div>
                        </div>
                        <div class="bg-gray-800 p-2 rounded">
                            <div class="text-purple-300 font-semibold">üìÖ ${lastUpdated}</div>
                            <div class="text-gray-400">Updated</div>
                        </div>
                    </div>
                    
                    <div class="flex gap-2">
                        <a href="${repo.html_url}" target="_blank" 
                           class="flex-1 px-3 py-2 bg-blue-600 hover:bg-blue-700 rounded text-white text-sm text-center transition-colors">
                            View on GitHub
                        </a>
                        ${repo.homepage ? `
                        <a href="${repo.homepage}" target="_blank" 
                           class="px-3 py-2 bg-green-600 hover:bg-green-700 rounded text-white text-sm transition-colors">
                            üåê
                        </a>
                        ` : ''}
                    </div>
                `;
        panel.style.display = 'block';
      }
      onMouseClick(event) {
        event.preventDefault();
        const rect = this.renderer.domElement.getBoundingClientRect();
        this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
        this.raycaster.setFromCamera(this.mouse, this.camera);
        const visibleStars = this.stars.filter(star => star.visible);
        const intersects = this.raycaster.intersectObjects(visibleStars);
        if (intersects.length > 0) {
          const star = intersects[0].object;
          this.showRepositoryInfo(star.userData);
          // Add click animation
          const originalScale = star.scale.clone();
          star.scale.multiplyScalar(1.3);
          setTimeout(() => {
            star.scale.copy(originalScale);
          }, 200);
        }
      }
      setupEventListeners() {
        // Load button
        document.getElementById('load-btn').addEventListener('click', () => {
          const username = document.getElementById('username-input').value.trim();
          if (username) {
            this.createGalaxy(username);
          }
        });
        // Enter key in input
        document.getElementById('username-input').addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            document.getElementById('load-btn').click();
          }
        });
        // Filter and sort controls
        document.getElementById('language-filter').addEventListener('change', (e) => {
          this.currentFilter = e.target.value;
          this.filterAndSort();
        });
        document.getElementById('sort-option').addEventListener('change', (e) => {
          this.currentSort = e.target.value;
          this.filterAndSort();
        });
        // Close info panel
        document.getElementById('close-info').addEventListener('click', () => {
          document.getElementById('info-panel').style.display = 'none';
        });
        // Mouse click for repository selection
        this.renderer.domElement.addEventListener('click', this.onMouseClick.bind(this));
        // Touch events for mobile
        this.renderer.domElement.addEventListener('touchend', (e) => {
          if (e.touches.length === 0 && e.changedTouches.length === 1) {
            this.onMouseClick(e.changedTouches[0]);
          }
        });
        // Window resize
        window.addEventListener('resize', () => {
          this.camera.aspect = window.innerWidth / window.innerHeight;
          this.camera.updateProjectionMatrix();
          this.renderer.setSize(window.innerWidth, window.innerHeight);
        });
      }
      animate() {
        requestAnimationFrame(this.animate.bind(this));
        this.controls.update();
        // Gentle rotation for stars and background
        this.stars.forEach((star, index) => {
          star.rotation.y += 0.005 * (1 + index * 0.001);
          star.rotation.x += 0.002;
        });
        if (this.backgroundStars) {
          this.backgroundStars.rotation.y += 0.0005;
        }
        this.renderer.render(this.scene, this.camera);
      }
    }
    // Initialize the galaxy
    const galaxy = new GitGalaxy();
    // Load Microsoft as a demo
    setTimeout(() => {
      document.getElementById('username-input').value = 'microsoft';
    }, 500);
  </script>
</body>

</html>
